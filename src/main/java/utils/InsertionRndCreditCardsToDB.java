package utils;

import dao.impl.ClientDAOImpl;
import dao.impl.CreditCardDAOImpl;
import dao.interfaces.ClientDAO;
import dao.interfaces.CreditCardDAO;
import services.entities.CreditCard;

import java.sql.SQLException;
import java.util.*;
import java.util.stream.Collectors;

public class InsertionRndCreditCardsToDB {

    public static void main(String[] args) throws SQLException, ClassNotFoundException {
        /*
        Method for action
         */
        //insertionCardsSetIntoDB(generateRandomCreditCards());
    }

    /**
     * This method inserts set of credit cards into Database using DAO interface.
     * As parameter, it takes Set<> which is generated by specific method.
     * @param cards
     */
    private static void insertionCardsSetIntoDB(Set<CreditCard> cards) {
        CreditCardDAO clientDAO = new CreditCardDAOImpl();
        cards.forEach(card -> {
            try {
                clientDAO.insertCreditCard(card);
            } catch (SQLException | ClassNotFoundException e) {
                e.printStackTrace();
            }
        });
    }

    /**
     * Generation of cards set with sorting cards by expiry date.
     * @return
     * @throws SQLException
     * @throws ClassNotFoundException
     */
    private static Set<CreditCard> generateRandomCreditCards() throws SQLException, ClassNotFoundException {
        Set<CreditCard> cards = new HashSet<>();
        Set<Integer> clientIDs = new HashSet<>();
        ClientDAO clientDao = new ClientDAOImpl();
        clientDao.retrieveAllClients()
                .forEach(client -> clientIDs.add(client.id));
        for (Integer id : clientIDs) {
            int rnd = (int) (Math.random() * 4) + 1;
            for (int i = 0; i < rnd; i++) {
                cards.add(generateCreditCardToClientID(id));
            }
        }
        return cards
                .stream()
                .sorted((o1, o2) -> compareToExpiryDates(o1.expiryDate, o2.expiryDate))
                .collect(Collectors.toCollection(LinkedHashSet::new));
    }

    /**
     * Util for comparing to string in Expiry date format
     * @param date1
     * @param date2
     * @return
     */
    private static int compareToExpiryDates(String date1, String date2) {
        String[] d1 = date1.split("/");
        String[] d2 = date2.split("/");
        int m1 = Integer.parseInt(d1[0]);
        int y1 = Integer.parseInt(d1[1]);
        int m2 = Integer.parseInt(d2[0]);
        int y2 = Integer.parseInt(d2[1]);
        if (y1 == y2 && m1 == m2) {
            return 0;
        } else if (y1 == y2) {
            return Integer.compare(m1, m2);
        } else {
            return Integer.compare(y1, y2);
        }
    }

    /**
     * Generation of random credit card using specific Client ID
     * @param clientID
     * @return
     */
    private static CreditCard generateCreditCardToClientID(int clientID) {
        CreditCard creditCard = new CreditCard();
        creditCard.cardNumber = generateNumber();
        creditCard.clientID = clientID;
        creditCard.creditLimit = generateLimit();
        creditCard.balance = generateBalance();
        creditCard.expiryDate = generateExpiryDate();
        return creditCard;
    }

    /**
     * Generation of random expiry date.
     * @return
     */
    private static String generateExpiryDate() {
        Calendar calendar = new GregorianCalendar();
        int year = calendar.get(Calendar.YEAR) + (int) (Math.random() * 5) + 1;
        int month = (int)(Math.random() * 12) + 1;
        if (month > 9) {
            return "" + month + "/" + year;
        } else {
            return "0" + month + "/" + year;
        }
    }

    /**
     * Generation of random balance.
     * I think this method could be the same as generationLimit.
     * @return
     */
    private static int generateBalance() {
        return generateLimit();
    }

    /**
     * Generation of random credit limit in range 50000 - 200000
     * @return
     */
    private static int generateLimit() {
        return ((int)(Math.random() * 150) + 50) * 1000;
    }

    /**
     * Generation of random card number
     * @return
     */
    private static long generateNumber() {
        int x1 = (int)(Math.random()*8999) + 1000;
        int x2 = (int)(Math.random()*8999) + 1000;
        int x3 = (int)(Math.random()*8999) + 1000;
        int x4 = (int)(Math.random()*8999) + 1000;
        return Long.parseLong("" + x1 + x2 + x3 + x4);
    }
}